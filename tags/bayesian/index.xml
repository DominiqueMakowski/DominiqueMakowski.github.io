<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bayesian | Dr Dominique Makowski</title>
    <link>/tags/bayesian/</link>
      <atom:link href="/tags/bayesian/index.xml" rel="self" type="application/rss+xml" />
    <description>Bayesian</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 29 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hud75d04f2b1977d0bc7efdcf2aeb84fcd_760423_512x512_fill_lanczos_center_2.png</url>
      <title>Bayesian</title>
      <link>/tags/bayesian/</link>
    </image>
    
    <item>
      <title>Extract individual scores from repeated measures</title>
      <link>/post/individual_scores/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/individual_scores/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;div id=&#34;generate-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Generate Data&lt;/h4&gt;
&lt;p&gt;See the functions‚Äô definition below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(easystats)

data &amp;lt;- get_data(n_participants=100, n_trials=20, d=1, var=4, noise=0.33)
results &amp;lt;- get_results(data)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fit-model&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Fit model&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- lm(Diff_Abs ~ Method, data=results)

modelbased::estimate_contrasts(model) %&amp;gt;%
  arrange(Difference) %&amp;gt;%
  mutate(Level1 = stringr::str_remove(Level1, &amp;quot;Diff_&amp;quot;),
         Level2 = stringr::str_remove(Level2, &amp;quot;Diff_&amp;quot;)) %&amp;gt;% 
  select(Level1, Level2, Difference, CI_low, CI_high, p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    Level1                 Level2    Difference      CI_low
## 1         PopulationModel                    Raw -4.711656e-03 -0.02437159
## 2  IndividualModel_Priors                    Raw -2.441615e-03 -0.02210155
## 3   IndividualModel_Bayes                    Raw -9.318125e-05 -0.01975312
## 4   IndividualModel_Bayes   IndividualModel_Freq -9.318125e-05 -0.01975312
## 5    IndividualModel_Freq                    Raw -1.348883e-16 -0.01965993
## 6  IndividualModel_Priors        PopulationModel  2.270041e-03 -0.01738989
## 7   IndividualModel_Bayes IndividualModel_Priors  2.348434e-03 -0.01731150
## 8    IndividualModel_Freq IndividualModel_Priors  2.441615e-03 -0.01721832
## 9   IndividualModel_Bayes        PopulationModel  4.618475e-03 -0.01504146
## 10   IndividualModel_Freq        PopulationModel  4.711656e-03 -0.01494828
##       CI_high p
## 1  0.01494828 1
## 2  0.01721832 1
## 3  0.01956675 1
## 4  0.01956675 1
## 5  0.01965993 1
## 6  0.02192997 1
## 7  0.02200837 1
## 8  0.02210155 1
## 9  0.02427841 1
## 10 0.02437159 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize-the-means&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Visualize the means&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;means &amp;lt;- modelbased::estimate_means(model) %&amp;gt;%
  arrange(Mean) %&amp;gt;%
  mutate(Method = stringr::str_remove(Method, &amp;quot;Diff_&amp;quot;),
         Method = factor(Method, levels=Method))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;means %&amp;gt;%
  ggplot(aes(x=Method, y=Mean, color=Method)) +
  geom_line(aes(group=1)) +
  geom_pointrange(aes(ymin=CI_low, ymax=CI_high), size=1) +
  theme_modern() + 
  theme(axis.text.x = element_text(angle = 45, hjust=1)) +
  scale_color_material(palette=&amp;quot;rainbow&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/individual_scores/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;
Though not significant, using the whole population model seems the most robust option when the whole dataset is available. Otherwise, using an individual model with informative priors appears as a potential alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Functions&lt;/h3&gt;
&lt;div id=&#34;generate-data-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Generate data&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_data &amp;lt;- function(n_participants=1000, n_trials=20, d=1, var=3, noise=0){

  scores_baseline &amp;lt;- rnorm(n_participants, 0, 1)
  scores_condition &amp;lt;- rnorm(n_participants, d, 1)
  variances &amp;lt;- rbeta(n_participants, 2, 8)
  variances &amp;lt;- 0.1 + variances * (var / max(variances))  # Rescale
  noise_sd &amp;lt;- abs(rnorm(n_participants, 0, noise))

  data &amp;lt;- data.frame()
  for (i in 1:n_participants){
    a &amp;lt;- rnorm(n_trials, scores_baseline[i], variances[i])
    b &amp;lt;- rnorm(n_trials, scores_condition[i], variances[i])
    a &amp;lt;- a + rnorm(n_trials, 0, noise_sd[i]) # Add noise
    b &amp;lt;- b + rnorm(n_trials, 0, noise_sd[i]) # Add noise
    data &amp;lt;- rbind(data, data.frame(&amp;quot;Participant&amp;quot; = sprintf(&amp;quot;S%02d&amp;quot;, i),
                                   &amp;quot;Y&amp;quot; = c(a, b),
                                   &amp;quot;Score_True&amp;quot; = rep(c(scores_baseline[i], scores_condition[i]), each=n_trials),
                                   &amp;quot;Condition&amp;quot; = rep(c(&amp;quot;Baseline&amp;quot;, &amp;quot;Manipulation&amp;quot;), each=n_trials)))
  }
  data
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;compute-individual-scores&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Compute individual scores&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(easystats)
library(rstanarm)

get_results &amp;lt;- function(data){
  # Raw method --------------------------------------------------------------

  results &amp;lt;- data %&amp;gt;%
    group_by(Participant, Condition) %&amp;gt;%
    summarise_all(mean) %&amp;gt;%
    rename(&amp;quot;Score_Raw&amp;quot; = &amp;quot;Y&amp;quot;) %&amp;gt;%
    arrange(Condition, Participant) %&amp;gt;%
    ungroup()


  # Population model --------------------------------------------------------

  model &amp;lt;- lme4::lmer(Y ~ Condition + (1 + Condition|Participant), data=data)
  # parameters::parameters(model)

  fixed &amp;lt;- insight::get_parameters(model, effects =&amp;quot;fixed&amp;quot;)$Estimate
  random &amp;lt;- insight::get_parameters(model, effects =&amp;quot;random&amp;quot;)$Participant

  # Transform coefs into scores
  pop_baseline &amp;lt;- random[, 1] + fixed[1]
  pop_manipulation &amp;lt;- pop_baseline + random[, 2] + fixed[2]

  results$Score_PopulationModel &amp;lt;- c(pop_baseline, pop_manipulation)


# Individual model --------------------------------------------------------

individual_model_data &amp;lt;- data.frame()
for(participant in unique(data$Participant)){
  cat(&amp;quot;.&amp;quot;)

  dat &amp;lt;- data[data$Participant==participant, ]
  # Without priors
  model1 &amp;lt;-lm(Y ~ Condition, data=dat)
  nopriors &amp;lt;- parameters::parameters(model1)$Coefficient

  # Bayesian
  model2 &amp;lt;-stan_glm(Y ~ Condition, data=dat, refresh=0)
  bayes &amp;lt;- parameters::parameters(model2)$Median

  # Bayesian with Priors
  model3 &amp;lt;-stan_glm(Y ~ Condition, data=dat, refresh=0,
                    prior = normal(fixed[1]),
                    prior_intercept = normal(fixed[2]))
  priors &amp;lt;- parameters::parameters(model3)$Median



  individual_model_data &amp;lt;- rbind(individual_model_data,
                                 data.frame(
    &amp;quot;Participant&amp;quot; = c(participant, participant),
    &amp;quot;Condition&amp;quot; = c(&amp;quot;Baseline&amp;quot;, &amp;quot;Manipulation&amp;quot;),
    &amp;quot;Score_IndividualModel_Freq&amp;quot; = c(nopriors[1], nopriors[1] + nopriors[2]),
    &amp;quot;Score_IndividualModel_Bayes&amp;quot; = c(bayes[1], bayes[1] + bayes[2]),
    &amp;quot;Score_IndividualModel_Priors&amp;quot; = c(priors[1], priors[1] + priors[2])
  ))

  # With priors

}

  results &amp;lt;- merge(results, individual_model_data)




  # Output ------------------------------------------------------------------
  diff &amp;lt;- results %&amp;gt;%
    mutate(Diff_Raw = Score_True - Score_Raw,
           Diff_PopulationModel = Score_True - Score_PopulationModel,
           Diff_IndividualModel_Freq = Score_True - Score_IndividualModel_Freq,
           Diff_IndividualModel_Bayes = Score_True - Score_IndividualModel_Bayes,
           Diff_IndividualModel_Priors = Score_True - Score_IndividualModel_Priors) %&amp;gt;%
    select(Participant, Condition, starts_with(&amp;quot;Diff&amp;quot;)) %&amp;gt;%
    pivot_longer(starts_with(&amp;quot;Diff&amp;quot;), names_to=&amp;quot;Method&amp;quot;, values_to=&amp;quot;Diff&amp;quot;) %&amp;gt;%
    mutate(Diff_Abs = abs(Diff))
  diff
}&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading! Do not hesitate to tweet and share this post, and leave a comment below&lt;/em&gt; ü§ó&lt;/p&gt;
&lt;p&gt;üê¶ &lt;em&gt;And don‚Äôt forget to join me on Twitter&lt;/em&gt; &lt;span class=&#34;citation&#34;&gt;[@Dom_Makowski]&lt;/span&gt;(&lt;a href=&#34;https://twitter.com/Dom_Makowski&#34; class=&#34;uri&#34;&gt;https://twitter.com/Dom_Makowski&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
